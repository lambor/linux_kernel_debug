KRN_DIR:=/home/dcnh/MyGithub/linux
KRN_IMG:=${KRN_DIR}/arch/i386/boot/bzImage

BBX_DIR:=/home/dcnh/MyGithub/busybox-1.26.2
RFS_IMG:=${BBX_DIR}/rootfs32.img
RFS_DIR:=_install

TEST_DIR:=/home/dcnh/MyGithub/kern_test_bin_32
TEST_BIN:=${TEST_DIR}/test

#CROSS_COMPILE:=/home/dcnh/MyGithub/rasp_linux/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-
CROSS_COMPILE:=arm-linux-gnueabi-

NETIP_PREFIX:=172.30.0
TAP0:=tap_0
BR0:=br_0

TMP_DIR:=${shell mktemp -d}

${TEST_BIN}: ${TEST_DIR}/Makefile
	ARCH=32 make -C ${TEST_DIR}

rootfs:
	make -C ${BBX_DIR} CROSS_COMPILE="${CROSS_COMPILE}" defconfig
	cd ${BBX_DIR}; sed -i -e '/CONFIG_PREFIX=/d' -e '/CONFIG_STATIC=/d' -e '$$ a CONFIG_PREFIX="./${RFS_DIR}"' -e '$$ a CONFIG_STATIC=y' ${BBX_DIR}/.config
	make -C ${BBX_DIR} CROSS_COMPILE="${CROSS_COMPILE}" install
	cd ${BBX_DIR}/${RFS_DIR}; mkdir -p proc sys dev etc etc/init.d
	chmod +x ${BBX_DIR}/${RFS_DIR}/etc/init.d/rcS

${KRN_IMG}:
	make -C ${KRN_DIR} mrproper
	make -C ${KRN_DIR} i386_defconfig
	printf "CONFIG_DEBUG_INFO=y\nCONFIG_DEBUG_KERNEL=y\nCONFIG_GDB_SCRIPTS=y\nCONFIG_RELOCATABLE=n" > "${TMP_DIR}/.config-fragment"
	cd ${KRN_DIR} && scripts/kconfig/merge_config.sh .config "${TMP_DIR}/.config-fragment"
	make -C ${KRN_DIR} -j$$((($$(nproc)+1)/2))

boot: ${KRN_IMG} ${RFS_IMG} ${TAP0}
	qemu-system-i386 \
		-nographic \
		-kernel ${KRN_IMG} \
		-initrd ${RFS_IMG} \
		-append 'root=/dev/ram rdinit=/sbin/init console=ttyS0 nokaslr' \
		-S -s \
		-netdev tap,id=mynet0,ifname=${TAP0},script=no,downscript=no -device e1000,netdev=mynet0

${BR0}:
	ip link | grep $@ > /dev/null || { sudo ip link add $@ type bridge; sudo ip addr add ${NETIP_PREFIX}.1/24 dev $@; }

${TAP0}: ${BR0}
	ip link | grep $@ > /dev/null || { sudo ip tuntap add $@ mode tap; sudo ip link set $@ master $<; }
	sudo ip link set $< up
	sudo ip link set $@ up

gdb:
	cd ${KRN_DIR} && gdb -ex "add-auto-load-safe-path ." \
		-ex "file vmlinux" \
		-ex "set arch i386" \
		-ex "target remote localhost:1234"

clean_bzImage:
	rm -f ${KRN_IMG}

clean_rootfs:
	rm -f ${RFS_IMG}

clean_net:
	ip link | grep ${TAP0} > /dev/null && sudo ip link del ${TAP0}
	ip link | grep ${BR0} > /dev/null && sudo ip link del ${BR0}

.PHONY: ${BR0} ${TAP0} boot gdb clean_bzImage clean_rootfs clean_net
